#!/bin/bash

# Check if required arguments are provided
if [ "$#" -lt 2 ]; then
  echo "Usage: $0 <namespace> <output_file> [exclude_containers]"
  exit 1
fi

NAMESPACE=$1
OUTPUT_FILE=$2
EXCLUDE_CONTAINERS=$3  # Optional argument for excluding containers
WATCH_INTERVAL=5      # Interval to check for new pods (in seconds)
RETRY_INTERVAL=7200    # Restart logs collection every 2 hours (in seconds)

# Ensure the output file is writable
touch "$OUTPUT_FILE" 2>/dev/null
if [ $? -ne 0 ]; then
  echo "Error: Cannot write to output file $OUTPUT_FILE"
  exit 1
fi

declare -A PROCESSED_PODS  # Track processed pods

# Function to tail logs for all containers in a pod
tail_logs() {
  pod=$1
  containers=$2

  # Loop through each container
  for container in $containers; do
    # Skip excluded containers
    if [[ ",${EXCLUDE_CONTAINERS}," == *",${container},"* ]]; then
      echo "  Skipping excluded container: $container" | tee -a "$OUTPUT_FILE"
      continue
    fi

    echo "  Tailing logs for container: $container" | tee -a "$OUTPUT_FILE"

    # Tail logs for the container in the pod and append to the output file
    kubectl logs -f "$pod" -c "$container" -n "$NAMESPACE" | while IFS= read -r line; do
      printf "%s/%s[%s]: %s\n" "$NAMESPACE" "$pod" "$container" "$line" >> "$OUTPUT_FILE"
    done &
  done
}

# Function to get containers in a pod
get_containers() {
  pod=$1
  kubectl get pod "$pod" -n "$NAMESPACE" -o jsonpath='{.spec.containers[*].name}'
}

# Function to monitor new pods
monitor_pods() {
  while true; do
    # Get the current list of pods
    pods=$(kubectl get pods -n "$NAMESPACE" -o jsonpath='{.items[*].metadata.name}')

    # Loop through each pod
    for pod in $pods; do
      # Skip if pod has already been processed
      if [[ -n "${PROCESSED_PODS[$pod]}" ]]; then
        continue
      fi

      # Get the phase of the pod
      phase=$(kubectl get pod "$pod" -n "$NAMESPACE" -o jsonpath='{.status.phase}')

      # Skip pods that are not in states with logs
      if [[ "$phase" != "Running" && "$phase" != "Succeeded" && "$phase" != "Failed" ]]; then
        continue
      fi

      echo "Processing new pod: $pod" | tee -a "$OUTPUT_FILE"

      # Get containers in the pod
      containers=$(get_containers "$pod")
      if [ -z "$containers" ]; then
        echo "  No containers found in pod $pod" | tee -a "$OUTPUT_FILE"
        continue
      fi

      # Start logs for the containers
      tail_logs "$pod" "$containers"

      # Mark the pod as processed
      PROCESSED_PODS["$pod"]=1
    done

    # Wait for the specified watch interval
    sleep $WATCH_INTERVAL
  done
}

# Main loop to restart logs collection every RETRY_INTERVAL
while true; do
  echo "Starting pod monitoring and log collection..." | tee -a "$OUTPUT_FILE"

  # Monitor new pods in the background
  monitor_pods &

  # Monitor process PID
  monitor_pid=$!

  # Wait for the retry interval
  sleep $RETRY_INTERVAL

  # Stop monitoring and restart logs collection
  echo "Restarting log collection after $RETRY_INTERVAL seconds..." | tee -a "$OUTPUT_FILE"
  kill "$monitor_pid" 2>/dev/null
done
